/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TataUsaha;

import Guru.Input.InputNilaiSiswa;
import TataUsaha.Update.UpdateDataGuru;
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import koneksi.koneksi;
import pelaporan.cell.TableActionCellEditor;
import pelaporan.cell.TableActionCellRender;
import pelaporan.cell.TableActionEvent;

/**
 *
 * @author Achmad
 */
public class DataGuru extends javax.swing.JFrame {

    /**
     * Creates new form DataGuru
     */
    private HomeTataUsaha homeFrame;
    public String nip;
    private String gen;

    public DataGuru(HomeTataUsaha homeFrame, String userName, int userId) {
        initComponents();
        this.homeFrame = homeFrame;
        this.userName = userName;
        this.userId = userId;
        user.setText(userName);
        loadDataGuru();
    }

    private int roleId;

    public int getRoleId() {
        return roleId;
    }

    public void setRoleId(int roleId) {
        this.roleId = roleId;
    }

    //    BARU 1
    private int userId;
    private String userName;

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataGuruTable = new javax.swing.JTable();
        user = new java.awt.Label();
        searchDataGuru = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBtn.setBackground(new java.awt.Color(204, 51, 255));
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("BACK");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        DataGuruTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIP", "NAMA GURU", "EMAIL", "PASSWORD", "MAPEL", "ACTION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DataGuruTable.setRowHeight(40);
        jScrollPane1.setViewportView(DataGuruTable);

        user.setAlignment(java.awt.Label.RIGHT);
        user.setFont(new java.awt.Font("Segoe Script", 1, 12)); // NOI18N
        user.setForeground(new java.awt.Color(204, 51, 255));
        user.setText("Name");

        searchDataGuru.setForeground(new java.awt.Color(153, 153, 153));
        searchDataGuru.setText("Search: nama atau nip");
        searchDataGuru.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchDataGuruFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchDataGuruFocusLost(evt);
            }
        });
        searchDataGuru.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchDataGuruKeyReleased(evt);
            }
        });

        jButton1.setForeground(new java.awt.Color(153, 153, 153));
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addGap(0, 634, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchDataGuru, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchDataGuru, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadDataGuru() {
        String query = "SELECT nip, full_name, email, password, guruMapel FROM users WHERE role_id = 2";

        DefaultTableModel model = new DefaultTableModel(new String[]{
            "NIP", "NAMA GURU", "EMAIL", "PASSWORD", "MAPEL", "ACTION"
        }, 0);

        try (Connection conn = (Connection) koneksi.koneksiDB(); Statement st = conn.createStatement(); ResultSet resultSet = st.executeQuery(query)) {

            while (resultSet.next()) {
                String nip = resultSet.getString("nip");
                String fullName = resultSet.getString("full_name");
                String email = resultSet.getString("email");
                String password = resultSet.getString("password");
                String guruMapel = resultSet.getString("guruMapel");

                model.addRow(new Object[]{nip, fullName, email, password, guruMapel});
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Data gagal dimuat", "Error", JOptionPane.ERROR_MESSAGE);
        }

        DataGuruTable.setModel(model);

        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                if (DataGuruTable.isEditing()) {
                    DataGuruTable.getCellEditor().stopCellEditing();
                }

                String nip = model.getValueAt(row, 0).toString();
                String fullName = model.getValueAt(row, 1).toString();
                String email_guru = model.getValueAt(row, 2).toString();
                String password = model.getValueAt(row, 3).toString();
                String mapel_guru = model.getValueAt(row, 4).toString();

                // Pastikan this adalah instance dari DataGuru
                UpdateDataGuru UpdateDataGuruForm = new UpdateDataGuru(nip, userId, fullName, email_guru, password, mapel_guru);
                UpdateDataGuruForm.setVisible(true);
            }

            @Override
            public void onDelete(int row) {
                if (DataGuruTable.isEditing()) {
                    DataGuruTable.getCellEditor().stopCellEditing();
                }

                DefaultTableModel model = (DefaultTableModel) DataGuruTable.getModel();
                String nip = model.getValueAt(row, 0).toString();

                int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data dengan NIS: " + nip + "?", "Konfirmasi Penghapusan", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    String query = "DELETE FROM users WHERE nip = ?";

                    try (Connection conn = koneksi.koneksiDB(); PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                        preparedStatement.setString(1, nip);
                        int affectedRows = preparedStatement.executeUpdate();

                        if (affectedRows > 0) {
                            model.removeRow(row);
                            JOptionPane.showMessageDialog(null, "Data berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Data gagal dihapus dari database.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menghapus data.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        };

        DataGuruTable.getColumnModel().getColumn(5).setCellRenderer(new TableActionCellRender());
        DataGuruTable.getColumnModel().getColumn(5).setCellEditor(new TableActionCellEditor(event));
    }

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        String hariDiPilih = homeFrame.getComboBoxHari().getSelectedItem().toString();
        homeFrame.setVisible(true);
        homeFrame.loadJadwalData(hariDiPilih);
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchDataGuruFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchDataGuruFocusGained
        if (searchDataGuru.getText().equals("Search: nama atau nip")) {
            searchDataGuru.setText("");
            searchDataGuru.setForeground(new Color(153, 153, 153));
         }    }//GEN-LAST:event_searchDataGuruFocusGained

    private void searchDataGuruFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchDataGuruFocusLost
        if (searchDataGuru.getText().equals("")) {
            searchDataGuru.setText("Search: nama atau nip");
            searchDataGuru.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_searchDataGuruFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadDataGuru();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchDataGuruKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchDataGuruKeyReleased
        String searchText = searchDataGuru.getText();

        String query = "SELECT nip, full_name, email, password, guruMapel FROM users WHERE role_id = 2 AND (nip LIKE ? OR full_name LIKE ?)";

        // Buat model tabel
        DefaultTableModel model = new DefaultTableModel(new String[]{
            "NIP", "NAMA GURU", "EMAIL", "PASSWORD", "MAPEL", "ACTION"
        }, 0);

        try (Connection conn = koneksi.koneksiDB(); PreparedStatement pstmt = conn.prepareStatement(query)) {

            // Set parameter untuk pencarian
            pstmt.setString(1, "%" + searchText + "%");
            pstmt.setString(2, "%" + searchText + "%");

            // Jalankan query
            try (ResultSet resultSet = pstmt.executeQuery()) {

                // Kosongkan tabel sebelum mengisi data baru
                model.setRowCount(0);

                // Tambahkan hasil query ke model tabel
                while (resultSet.next()) {
                    String nip = resultSet.getString("nip");
                    String fullName = resultSet.getString("full_name");
                    String email = resultSet.getString("email");
                    String password = resultSet.getString("password");
                    String guruMapel = resultSet.getString("guruMapel");

                    model.addRow(new Object[]{nip, fullName, email, password, guruMapel});
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Data gagal dimuat", "Error", JOptionPane.ERROR_MESSAGE);
        }

        DataGuruTable.setModel(model);

        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                if (DataGuruTable.isEditing()) {
                    DataGuruTable.getCellEditor().stopCellEditing();
                }

                String nip = model.getValueAt(row, 0).toString();
                String fullName = model.getValueAt(row, 1).toString();
                String email_guru = model.getValueAt(row, 2).toString();
                String password = model.getValueAt(row, 3).toString();
                String mapel_guru = model.getValueAt(row, 4).toString();

                // Pastikan this adalah instance dari DataGuru
                UpdateDataGuru UpdateDataGuruForm = new UpdateDataGuru(nip, userId, fullName, email_guru, password, mapel_guru);
                UpdateDataGuruForm.setVisible(true);
            }

            @Override
            public void onDelete(int row) {
                if (DataGuruTable.isEditing()) {
                    DataGuruTable.getCellEditor().stopCellEditing();
                }

                DefaultTableModel model = (DefaultTableModel) DataGuruTable.getModel();
                String nip = model.getValueAt(row, 0).toString();

                int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data dengan NIS: " + nip + "?", "Konfirmasi Penghapusan", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    String query = "DELETE FROM users WHERE nip = ?";

                    try (Connection conn = koneksi.koneksiDB(); PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                        preparedStatement.setString(1, nip);
                        int affectedRows = preparedStatement.executeUpdate();

                        if (affectedRows > 0) {
                            model.removeRow(row);
                            JOptionPane.showMessageDialog(null, "Data berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Data gagal dihapus dari database.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menghapus data.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        };

        DataGuruTable.getColumnModel().getColumn(5).setCellRenderer(new TableActionCellRender());
        DataGuruTable.getColumnModel().getColumn(5).setCellEditor(new TableActionCellEditor(event));
    }//GEN-LAST:event_searchDataGuruKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataGuru.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataGuru.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataGuru.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataGuru.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HomeTataUsaha homeFrame = new HomeTataUsaha();
                String userName = "NamaPenggunaTest";
                int userId = 1;
                new DataGuru(homeFrame, userName, userId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DataGuruTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchDataGuru;
    private java.awt.Label user;
    // End of variables declaration//GEN-END:variables
}
